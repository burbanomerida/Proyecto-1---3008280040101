str(lista_datos)
# Visualizar cada data.frame en la lista
View(lista_datos[[1]]) # Muestra el 1
View(lista_datos[[2]]) # Muestra el 2
View(lista_datos[[3]]) # Muestra el 3
View(lista_datos[[4]]) # Muestra el 4
View(lista_datos[[5]]) # Muestra el 5
View(lista_datos[[6]]) # Muestra el 6
View(lista_datos[[7]]) # Muestra el 7
View(lista_datos[[8]]) # Muestra el 8
# Cargando el paquete dplyr
library(dplyr)
# Detecta y convierte automáticamente las columnas con diferentes tipos de datos
lista_datos <- lapply(lista_datos, function(df) {
df <- mutate(df,
CIUOHOM = as.character(CIUOHOM),
CIUOMUJ = as.character(CIUOMUJ))  # Convertimos CIUOHOM y CIUOMUJ a character
return(df)
})
# Combinando todos los dataframes en un solo dataframe
combined_df <- bind_rows(lista_datos)
# Mostrar registros del dataframe combinado
View(combined_df)
# Combinando todos los dataframes en un solo dataframe
combined_df <- bind_rows(lista_datos)
# Mostrar registros del dataframe combinado
View(combined_df)
# Ruta a la carpeta que contiene los archivos .sav
carpeta <- "D:/Datos Matrimonios y Divorcios/Divorcios"
# Obtener una lista de todos los archivos .sav en la carpeta
archivos_sav2 <- list.files(path = carpeta, pattern = "\\.sav$", full.names = TRUE)
# Leer cada archivo .sav y almacenarlo en una lista
lista_datos2 <- lapply(archivos_sav, read_sav)
# Visualizar la lista de data.frames
str(lista_datos2)
# Visualizar cada data.frame en la lista
View(lista_datos2[[1]]) # Muestra el 1
View(lista_datos2[[2]]) # Muestra el 2
View(lista_datos2[[3]]) # Muestra el 3
View(lista_datos2[[4]]) # Muestra el 4
View(lista_datos2[[5]]) # Muestra el 5
View(lista_datos2[[6]]) # Muestra el 6
View(lista_datos2[[7]]) # Muestra el 7
View(lista_datos2[[8]]) # Muestra el 8
# Detecta y convierte automáticamente las columnas con diferentes tipos de datos
lista_datos2 <- lapply(lista_datos2, function(df2) {
df2 <- mutate(df2,
CIUOHOM = as.character(CIUOHOM),
CIUOMUJ = as.character(CIUOMUJ))  # Convertimos CIUOHOM y CIUOMUJ a character
return(df2)
})
# Combinando todos los dataframes en un solo dataframe
combined_df2 <- bind_rows(lista_datos2)
# Mostrar registros del dataframe combinado
View(combined_df2)
reglas <- apriori(combined_df, parameter = list(support=0.4, confidence=0.6))
install.packages("arules")
library(arules)
reglas <- apriori(combined_df, parameter = list(support=0.4, confidence=0.6))
reglasframe <- as (reglas, "data.frame")
View(reglasframe)
reglas2 <- apriori(combined_df2, parameter = list(support=0.4, confidence=0.6))
reglasframe2 <- as (reglas, "data.frame")
View(reglasframe2)
View(reglasframe)
View(combined_df2)
str(lista_datos2)
variable_labels <- sapply(lista_datos, attr, "label")
print(variable_labels)
View(combined_df)
View(reglasframe)
View(reglasframe2)
#Genera reglas de asociación en combined_df con soporte 0.4 y confianza 0.6.
reglas2 <- apriori(combined_df2, parameter = list(support=0.2, confidence=0.5))
#Convierte las reglas en un dataframe para fácil visualización
reglasframe2 <- as (reglas, "data.frame")
View(reglasframe2)
View(reglasframe)
View(reglasframe2)
#Genera reglas de asociación en combined_df con soporte 0.4 y confianza 0.6.
reglas2 <- apriori(combined_df2, parameter = list(support=0.2, confidence=0.5))
#Convierte las reglas en un dataframe para fácil visualización
reglasframe2 <- as (reglas, "data.frame")
View(reglasframe2)
carpeta <- "D:/Datos Matrimonios y Divorcios/Divorcios"
# Obtener una lista de todos los archivos .sav en la carpeta
archivos_sav2 <- list.files(path = carpeta, pattern = "\\.sav$", full.names = TRUE)
# Leer cada archivo .sav y almacenarlo en una lista
lista_datos2 <- lapply(archivos_sav, read_sav)
# Visualizar la lista de data.frames
str(lista_datos2)
# Detecta y convierte automáticamente las columnas con diferentes tipos de datos
lista_datos2 <- lapply(lista_datos2, function(df2) {
df2 <- mutate(df2,
CIUOHOM = as.character(CIUOHOM),
CIUOMUJ = as.character(CIUOMUJ))  # Convertimos CIUOHOM y CIUOMUJ a character
return(df2)
})
# Combinando todos los dataframes en un solo dataframe
combined_df2 <- bind_rows(lista_datos2)
# Mostrar registros del dataframe combinado
View(combined_df2)
#Genera reglas de asociación en combined_df con soporte 0.4 y confianza 0.6.
reglas2 <- apriori(combined_df2, parameter = list(support=0.2, confidence=0.5))
#Convierte las reglas en un dataframe para fácil visualización
reglasframe2 <- as (reglas, "data.frame")
View(reglasframe2)
View(reglasframe2)
install.packages("haven")
install.packages("dplyr")
install.packages("haven")
install.packages("dplyr")
# Cargar la biblioteca haven para leer archivos .sav
library(haven)
# Ruta a la carpeta que contiene los archivos .sav
carpeta <- "D:/Datos Matrimonios y Divorcios/Matrimonios"
# Obtener una lista de todos los archivos .sav en la carpeta
archivos_sav <- list.files(path = carpeta, pattern = "\\.sav$", full.names = TRUE)
# Leer cada archivo .sav y almacenarlo en una lista
lista_datos <- lapply(archivos_sav, read_sav)
# Visualizar la lista de data.frames
str(lista_datos)
# Cargando el paquete dplyr
library(dplyr)
# Detecta y convierte automáticamente las columnas con diferentes tipos de datos
lista_datos <- lapply(lista_datos, function(df) {
df <- mutate(df,
CIUOHOM = as.character(CIUOHOM),
CIUOMUJ = as.character(CIUOMUJ))  # Convertimos CIUOHOM y CIUOMUJ a character
return(df)
})
# Combinando todos los dataframes en un solo dataframe
combined_df <- bind_rows(lista_datos)
# Ruta a la carpeta que contiene los archivos .sav
carpeta <- "D:/Datos Matrimonios y Divorcios/Divorcios"
# Obtener una lista de todos los archivos .sav en la carpeta
archivos_sav2 <- list.files(path = carpeta, pattern = "\\.sav$", full.names = TRUE)
# Leer cada archivo .sav y almacenarlo en una lista
lista_datos2 <- lapply(archivos_sav, read_sav)
# Visualizar la lista de data.frames
str(lista_datos2)
# Detecta y convierte automáticamente las columnas con diferentes tipos de datos
lista_datos2 <- lapply(lista_datos2, function(df2) {
df2 <- mutate(df2,
CIUOHOM = as.character(CIUOHOM),
CIUOMUJ = as.character(CIUOMUJ))  # Convertimos CIUOHOM y CIUOMUJ a character
return(df2)
})
# Combinando todos los dataframes en un solo dataframe
combined_df2 <- bind_rows(lista_datos2)
install.packages("https://mhahsler.github.io/arules/docs/fim4r/fim4r_latest.tar.gz", repos = NULL, type = "source")
system("make --version")
combined_df
datamsc <- subset(combined_df, PUEMUJ == 1)
datamsc2 <- datamsc[, !(names(datamsc) %in% c("PUEMUJ"))]
reglas2_1 <- fim4r(datamsc2, method = "fpgrowth", target = "rules", supp = .2, conf = .5)
View(reglas2_1)
View(datamsc2)
reglas2_1
reglas2_1 <- fim4r(datamsc2, method = "fpgrowth", target = "rules", supp = .2, conf = .5)
View(reglas2_1)
reglas2_1_df <- as.data.frame(reglas2_1)
reglas2_1_df <- as(reglas2_1, "data.frame")
View(reglas2_1_df)
View(reglas2_1_df)
datamsc_ <- subset(combined_df2, PEI3 == 2)
datamsc_ <- subset(combined_df2, ESCHOM == 1)
datamsc2_ <- datamsc_[, !(names(datamsc_) %in% c("ESCHOM"))]
reglas2_2 <- fim4r(datamsc2_, method = "fpgrowth", target = "rules", supp = .2, conf = .5)
reglas2_2_df <- as(reglas2_2, "data.frame")
View(reglas2_2_df)
combined_df
#MATRIMONIOS:
#Se seleccionan los datos a evaluar
data_seleccion <- combined_df[, c("EDADHOM", "EDADMUJ")]
data_seleccion <- subset(data_seleccion, EDADHOM < 100)
#Se ejecuta kmeans
cluster <- kmeans(data_seleccion, centers = 4)
combined_df2
#DIVORCIOS
#Se seleccionan los datos a evaluar
data_seleccion2 <- combined_df2[, c("ESCHOM", "ESCMUJ")]
data_seleccion2 <- subset(data_seleccion, ESCHOM < 100)
combined_df2
View(combined_df2)
#DIVORCIOS
#Se seleccionan los datos a evaluar
data_seleccion2 <- combined_df2[, c("ESCMUJ", "ESCHOM")]
data_seleccion2 <- subset(data_seleccion, ESCMUJ < 10)
#Se ejecuta kmeans
cluster <- kmeans(data_seleccion2, centers = 4)
install.packages("ggplot2")
library(ggplot2)
centros <- as.data.frame(cluster$centers)
names(centros) <- c("EDADHOM", "EDADMUJ")
grafico <- ggplot(data_seleccion, aes(x = EDADHOM, y = EDADMUJ, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros, aes(x = EDADHOM, y = EDADMUJ), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
data_reducida <- sample_n(data_seleccion, 1000)
#Se ejecuta kmeans
cluster <- kmeans(data_reducida, centers = 4)
centros <- as.data.frame(cluster$centers)
names(centros) <- c("EDADHOM", "EDADMUJ")
grafico <- ggplot(data_seleccion, aes(x = EDADHOM, y = EDADMUJ, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros, aes(x = EDADHOM, y = EDADMUJ), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
grafico <- ggplot(data_reducida, aes(x = EDADHOM, y = EDADMUJ, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros, aes(x = EDADHOM, y = EDADMUJ), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
data_seleccion2 <- combined_df2[, c("ESCMUJ", "ESCHOM")]
data_reducida2 <- sample_n(data_seleccion2, 1000)
#Se ejecuta kmeans
cluster <- kmeans(data_reducida2, centers = 4)
centros2 <- as.data.frame(cluster$centers)
names2(centros2) <- c("ESCMUJ", "ESCHOM")
centros2 <- as.data.frame(cluster$centers)
names(centros2) <- c("ESCMUJ", "ESCHOM")
grafico <- ggplot(data_reducida2, aes(x = ESCMUJ, y = ESCHOM, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros, aes(x = ESCMUJ, y = ESCHOM), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
data_seleccion2 <- combined_df2[, c("NUNUHO", "NUNUMU")]
data_reducida2 <- sample_n(data_seleccion2, 1000)
cluster2 <- kmeans(data_reducida2, centers = 4)
centros <- as.data.frame(cluster2$centers2)
#DIVORCIOS
centros2 <- as.data.frame(cluste2$centers2)
centros2 <- as.data.frame(cluster2$centers2)
names(centros2) <- c("ESCMUJ", "ESCHOM")
names(centros2) <- c("NUNUHO", "NUNUMU")
data_seleccion2 <- combined_df2[, c("NUNUHO", "NUNUMU")]
data_reducida2 <- sample_n(data_seleccion2, 1000)
cluster2 <- kmeans(data_reducida2, centers2 = 4)
#Se ejecuta kmeans
cluster2 <- kmeans(data_reducida2, centers = 4)
centros2 <- as.data.frame(cluster2$centers)
names(centros2) <- c("NUNUHO", "NUNUMU")
grafico <- ggplot(data_reducida2, aes(x = ESCMUJ, y = ESCHOM, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros, aes(x = ESCMUJ, y = ESCHOM), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
grafico <- ggplot(data_reducida2, aes(x = NUNUHO, y = NUNUMU, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros, aes(x = NUNUHO, y = NUNUMU), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
#DIVORCIOS
#Se seleccionan los datos a evaluar
data_seleccion2 <- combined_df2[, c("NUNUHO", "NUNUMU")]
data_reducida2 <- sample_n(data_seleccion2, 1000)
#Se ejecuta kmeans
cluster2 <- kmeans(data_reducida2, centers = 4)
centros2 <- as.data.frame(cluster2$centers)
names(centros2) <- c("NUNUHO", "NUNUMU")
grafico <- ggplot(data_reducida2, aes(x = NUNUHO, y = NUNUMU, color = as.factor(cluster2$cluster2))) +
geom_point()+
geom_point(data = centros2, aes(x = NUNUHO, y = NUNUMU), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
rlang::last_trace()
#DIVORCIOS
centros2 <- as.data.frame(cluster2$centers)
names(centros2) <- c("NUNUHO", "NUNUMU")
grafico <- ggplot(data_reducida2, aes(x = NUNUHO, y = NUNUMU, color = as.factor(cluster2$cluster2))) +
geom_point()+
geom_point(data = centros2, aes(x = NUNUHO, y = NUNUMU), color = "red", size = 4, shape = 8) +
labs(color = "Cluster2") +
theme_minimal()
grafico
cluster2 <- kmeans(data_reducida2, centers = 4)
library(ggplot2)
#MATRIMONIOS
centros <- as.data.frame(cluster$centers)
names(centros) <- c("EDADHOM", "EDADMUJ")
grafico <- ggplot(data_reducida, aes(x = EDADHOM, y = EDADMUJ, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros, aes(x = EDADHOM, y = EDADMUJ), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
#MATRIMONIOS:
#Se seleccionan los datos a evaluar
data_seleccion <- combined_df[, c("EDADHOM", "EDADMUJ")]
data_seleccion <- subset(data_seleccion, EDADHOM < 100)
data_reducida <- sample_n(data_seleccion, 1000)
#Se ejecuta kmeans
cluster <- kmeans(data_reducida, centers = 4)
#MATRIMONIOS
centros <- as.data.frame(cluster$centers)
names(centros) <- c("EDADHOM", "EDADMUJ")
grafico <- ggplot(data_reducida, aes(x = EDADHOM, y = EDADMUJ, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros, aes(x = EDADHOM, y = EDADMUJ), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
#DIVORCIOS
#Se seleccionan los datos a evaluar
data_seleccion2 <- combined_df2[, c("NUNUHO", "NUNUMU")]
data_reducida2 <- sample_n(data_seleccion2, 1000)
#Se ejecuta kmeans
cluster2 <- kmeans(data_reducida2, centers = 4)
centros2 <- as.data.frame(cluster2$centers)
names(centros2) <- c("NUNUHO", "NUNUMU")
grafico <- ggplot(data_reducida2, aes(x = NUNUHO, y = NUNUMU, color = as.factor(cluster2$cluster2))) +
geom_point()+
geom_point(data = centros2, aes(x = NUNUHO, y = NUNUMU), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
#DIVORCIOS
centros2 <- as.data.frame(cluster2$centers)
names(centros2) <- c("NUNUHO", "NUNUMU")
grafico <- ggplot(data_reducida2, aes(x = NUNUHO, y = NUNUMU, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros2, aes(x = NUNUHO, y = NUNUMU), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
#DIVORCIOS
centros2 <- as.data.frame(cluster2$centers)
names(centros2) <- c("NUNUHO", "NUNUMU")
grafico <- ggplot(data_reducida2, aes(x = NUNUHO, y = NUNUMU, color = as.factor(cluster2$cluster2))) +
geom_point()+
geom_point(data = centros2, aes(x = NUNUHO, y = NUNUMU), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
#Se seleccionan los datos a evaluar
data_seleccion2 <- combined_df2[, c("NUNUHO", "NUNUMU")]
data_reducida2 <- sample_n(data_seleccion2, 1000)
#Se ejecuta kmeans
cluster2 <- kmeans(data_reducida2, centers = 4)
centros2 <- as.data.frame(cluster2$centers)
names(centros2) <- c("NUNUHO", "NUNUMU")
grafico <- ggplot(data_reducida2, aes(x = NUNUHO, y = NUNUMU, color = as.factor(cluster2$cluster2))) +
geom_point()+
geom_point(data = centros2, aes(x = NUNUHO, y = NUNUMU), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
nrow(data_reducida2)
length(cluster2$cluster2)
cluster2 <- kmeans(data_reducida2, centers = 4)
length(cluster2$cluster2)
cluster2 <- kmeans(data_reducida2, centers = 4)
length(cluster2$cluster2)
grafico
library(ggplot2)
#MATRIMONIOS:
#Se seleccionan los datos a evaluar
data_seleccion <- combined_df[, c("EDADHOM", "EDADMUJ")]
data_seleccion <- subset(data_seleccion, EDADHOM < 100)
data_reducida <- sample_n(data_seleccion, 1000)
#MATRIMONIOS
centros <- as.data.frame(cluster$centers)
names(centros) <- c("EDADHOM", "EDADMUJ")
grafico <- ggplot(data_reducida, aes(x = EDADHOM, y = EDADMUJ, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros, aes(x = EDADHOM, y = EDADMUJ), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
#MATRIMONIOS:
#Se seleccionan los datos a evaluar
data_seleccion <- combined_df[, c("EDADHOM", "EDADMUJ")]
data_seleccion <- subset(data_seleccion, EDADHOM < 100)
data_reducida <- sample_n(data_seleccion, 1000)
data_seleccion <- combined_df[, c("EDADHOM", "EDADMUJ")]
data_seleccion <- subset(data_seleccion, EDADHOM < 100)
data_reducida <- sample_n(data_seleccion, 1000)
centros <- as.data.frame(cluster$centers)
names(centros) <- c("EDADHOM", "EDADMUJ")
grafico <- ggplot(data_reducida, aes(x = EDADHOM, y = EDADMUJ, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros, aes(x = EDADHOM, y = EDADMUJ), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
#MATRIMONIOS:
#Se seleccionan los datos a evaluar
data_seleccion <- combined_df[, c("EDADHOM", "EDADMUJ")]
data_seleccion <- subset(data_seleccion, EDADHOM < 100)
data_reducida <- sample_n(data_seleccion, 1000)
#GRÁFICOS KMEANS
centros <- as.data.frame(cluster$centers)
names(centros) <- c("EDADHOM", "EDADMUJ")
grafico <- ggplot(data_reducida, aes(x = EDADHOM, y = EDADMUJ, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros, aes(x = EDADHOM, y = EDADMUJ), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
data_reducida
#MATRIMONIOS:
#Se seleccionan los datos a evaluar
data_seleccion <- combined_df[, c("EDADHOM", "EDADMUJ")]
data_seleccion <- subset(data_seleccion, EDADHOM < 100)
data_reducida <- sample_n(data_seleccion, 1000)
#GRÁFICOS KMEANS
centros <- as.data.frame(cluster$centers)
names(centros) <- c("EDADHOM", "EDADMUJ")
grafico <- ggplot(data_reducida, aes(x = EDADHOM, y = EDADMUJ, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(combined_df = centros, aes(x = EDADHOM, y = EDADMUJ), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
combined_df
cluster <- kmeans(data_reducida, centers = 4)
centros <- as.data.frame(cluster$centers)
names(centros) <- c("EDADHOM", "EDADMUJ")
grafico <- ggplot(data_reducida, aes(x = EDADHOM, y = EDADMUJ, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(combined_df = centros, aes(x = EDADHOM, y = EDADMUJ), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
#GRÁFICOS KMEANS
centros <- as.data.frame(cluster$centers)
names(centros) <- c("EDADHOM", "EDADMUJ")
grafico <- ggplot(data_reducida, aes(x = EDADHOM, y = EDADMUJ, color = as.factor(cluster$cluster))) +
geom_point()+
geom_point(data = centros, aes(x = EDADHOM, y = EDADMUJ), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
View(combined_df2)
View(combined_df2)
#DIVORCIOS:
#Se seleccionan los datos a evaluar
data_seleccion2 <- combined_df2[, c("NUNUHO", "NUNUMU")]
data_seleccion2 <- subset(data_seleccion2, NUNUHO > 2)
data_reducida2 <- sample_n(data_seleccion2, 1000)
cluster2 <- kmeans(data_reducida2, centers = 4)
#DIVORCIOS:
#Se seleccionan los datos a evaluar
data_seleccion2 <- combined_df2[, c("NUNUHO", "NUNUMU")]
data_seleccion2 <- subset(data_seleccion2, NUNUHO > 2)
data_reducida2 <- sample_n(data_seleccion2, 1000)
cluster2 <- kmeans(data_reducida2, centers = 3)
#DIVORCIOS:
#Se seleccionan los datos a evaluar
data_seleccion2 <- combined_df2[, c("NUNUHO", "NUNUMU")]
data_seleccion2 <- subset(data_seleccion2, NUNUHO > 2)
data_reducida2 <- sample_n(data_seleccion2, 1000)
cluster2 <- kmeans(data_reducida2, centers = 2)
#DIVORCIOS:
#Se seleccionan los datos a evaluar
data_seleccion2 <- combined_df2[, c("NUNUHO", "NUNUMU")]
data_seleccion2 <- subset(data_seleccion2, NUNUHO > 2)
data_reducida2 <- sample_n(data_seleccion2, 1000)
cluster2 <- kmeans(data_reducida2, centers = 2)
#DIVORCIOS:
#Se seleccionan los datos a evaluar
data_seleccion2 <- combined_df2[, c("NUNUHO", "NUNUMU")]
data_seleccion2 <- subset(data_seleccion2, NUNUHO > 2)
data_reducida2 <- sample_n(data_seleccion2, 1000)
cluster2 <- kmeans(data_reducida2, centers = 2)
#GRÁFICOS KMEANS
centros2 <- as.data.frame(cluster$centers)
names(centros) <- c("EDADHOM", "EDADMUJ")
grafico <- ggplot(data_reducida, aes(x = NUNUHO, y = NUNUMU, color = as.factor(cluster2$cluster))) +
geom_point()+
geom_point(data = centros2, aes(x = NUNUHO, y = NUNUMU), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
# Selección de datos y clustering
data_seleccion2 <- combined_df2[, c("NUNUHO", "NUNUMU")]
data_seleccion2 <- subset(data_seleccion2, NUNUHO > 2)
data_reducida2 <- sample_n(data_seleccion2, 1000)
cluster2 <- kmeans(data_reducida2, centers = 2)
# Conversión de los centros de cluster2 a dataframe
centros2 <- as.data.frame(cluster2$centers)
names(centros2) <- c("NUNUHO", "NUNUMU")  # Aseguramos los nombres correctos
# Gráfico KMeans
grafico <- ggplot(data_reducida2, aes(x = NUNUHO, y = NUNUMU, color = as.factor(cluster2$cluster))) +
geom_point() +
geom_point(data = centros2, aes(x = NUNUHO, y = NUNUMU), color = "red", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico
# MATRIMONIOS - SEGUNDA GRÁFICA
# Selección de datos para el segundo gráfico
data_seleccion2 <- combined_df2[, c("EDADHOM", "EDADMUJ")]
data_seleccion2 <- subset(data_seleccion2, EDADHOM < 100)
data_reducida2 <- sample_n(data_seleccion2, 1000)
cluster2 <- kmeans(data_reducida2, centers = 4)
# GRÁFICOS KMEANS - SEGUNDA GRÁFICA
centros2 <- as.data.frame(cluster2$centers)
names(centros2) <- c("EDADHOM2", "EDADMUJ2")
grafico2 <- ggplot(data_reducida2, aes(x = EDADHOM, y = EDADMUJ, color = as.factor(cluster2$cluster))) +
geom_point() +
geom_point(data = centros2, aes(x = EDADHOM2, y = EDADMUJ2), color = "blue", size = 4, shape = 8) +
labs(color = "Cluster") +
theme_minimal()
grafico2
